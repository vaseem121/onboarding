@model smartTechAuthenticator.ViewModels.ForgotPasswordViewModel
@{
    ViewBag.Title = "ForgotPassword";
    Layout = "~/Views/Shared/_SignUpLayout.cshtml";
}
<style>

    @@media(max-width:768px) {
        .password-block {
            position: relative;
        }

        .fa-eye {
            position: absolute;
            right: 15px;
            top: 53.5%;
        }

        .fa-eye-slash {
            position: absolute;
            right: 15px;
            top: 53.5%;
        }

        .hero {
            overflow: scroll !important;
            padding: 0px 0 60px 0 !important;
            height: 500px;
            top: 28% !important;
            background-color: white;
        }

        .login_container {
            position: relative;
            top: 55%;
        }

        .footer-menu .fa {
            display: block !important;
            margin: auto !important;
        }

        .signin_option_block {
            margin-bottom: 20px;
        }
    }

    @@media (min-width: 769px) {
        .hero {
            height: -webkit-fill-available;
            margin-top: 0px !important;
            background-color: white;
        }

        .fa-eye {
            position: absolute;
            right: 3%;
            top: 55%;
        }

        .fa-eye-slash {
            position: absolute;
            right: 3%;
            top: 55%;
        }

        .login_section {
            padding: 0%;
        }

        #hero .container {
            margin-top: 0%;
        }

        .password-block {
            position: relative;
        }
    }

    .fixed-top {
        padding: 0px;
    }

    @@media (min-width: 768px) {
        #hero .container {
            margin-top: -3%;
        }
    }

    @@media(max-width:479px) {
        .hero {
            top: auto !important;
            bottom: -25px;
        }
    }
</style>
<style>
    .form-form-wrap {
        height: 0px !important;
    }

    .form-container.outer {
        margin-top: 50px;
    }

    .inputs input {
        width: 50px;
        height: 40px;
    }

    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        margin: 0
    }
</style>
<section id="hero" class="hero d-flex align-items-center">
    <div class="container login_container">
        <div class="row">
            @using (Html.BeginForm("ForgotPassword","Account", FormMethod.Post, new { @class = "form-horizontal" }))
            {

                @Html.AntiForgeryToken()
            <div class="col-md-12  mb-3 login_section">


                @if (TempData["Otp"] != null)
                {
                    <div class="login-block mb-4">
                        <h3><b>Password Recovery</b></h3>
                        <p>Please enter the one time password to verify your account. OTP is valid for 5 minutes.</p>
                    </div>


                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.HiddenFor(Model => Model.Email);
                    <div id="otp" class="inputs d-flex flex-row justify-content-center mt-2">
                        @Html.EditorFor(model => model.First, new { htmlAttributes = new { @class = "m-2 text-center form-control rounded", @id = "first", required = "required", maxlength = "1" } })
                        @Html.EditorFor(model => model.Second, new { htmlAttributes = new { @class = "m-2 text-center form-control rounded", @id = "second", required = "required", maxlength = "1" } })
                        @Html.EditorFor(model => model.Third, new { htmlAttributes = new { @class = "m-2 text-center form-control rounded", @id = "third", required = "required", maxlength = "1" } })
                        @Html.EditorFor(model => model.Fourth, new { htmlAttributes = new { @class = "m-2 text-center form-control rounded", @id = "fourth", required = "required", maxlength = "1" } })
                        @Html.EditorFor(model => model.Fifth, new { htmlAttributes = new { @class = "m-2 text-center form-control rounded", @id = "Fifth", required = "required", maxlength = "1" } })
                        @Html.EditorFor(model => model.Sixth, new { htmlAttributes = new { @class = "m-2 text-center form-control rounded", @id = "Sixth", required = "required", maxlength = "1" } })

                    </div>
                    <div class="d-sm-flex justify-content-between">

                        <div class="field-wrapper">
                            <button type="submit" class="btn btn-primary">Submit OTP</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="login-block mb-4">
                        <h3><b>Password Recovery</b></h3>
                        <p>Please enter email</p>
                    </div>
                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                    <br />
                    <div class="d-sm-flex justify-content-between">

                        <div class="field-wrapper">
                            <button type="submit" class="btn btn-primary">Send OTP</button>
                        </div>
                    </div>
                }


            </div>
            }
        </div>
    </div>
</section>


<script>
        document.addEventListener("DOMContentLoaded", function (event) {
            function OTPInput() {
                const inputs = document.querySelectorAll('#otp > *[id]');
                for (let i = 0; i < inputs.length; i++) {
                    inputs[i].addEventListener('keydown', function (event) {
                        if (event.key === "Backspace") {
                            inputs[i].value = '';
                            // if (i !== 0) inputs[i - 1].focus();
                        }
                        else {
                            if (i === inputs.length - 1 && inputs[i].value !== '') { return true; }
                            else if (event.keyCode > 47 && event.keyCode < 58 || event.keyCode > 95 && event.keyCode < 106) {
                                inputs[i].value = event.key;
                                if (i !== inputs.length - 1) inputs[i + 1].focus(); event.preventDefault();
                            }
                            else if (event.keyCode > 64 && event.keyCode < 94 || event.keyCode > 105 && event.keyCode < 223) {
                                event.preventDefault();
                            }
                        }
                    });
                }
            }
            OTPInput();
        });
</script>